{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;AAOO,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,QAAQ,CAAC;KAClB;;wEAFY,YAAY;0GAAZ,YAAY;QCPzB,sEAAK;QACD,sEAAK;QACD,qEAAI;QAAA,mEAAQ;QAAA,4DAAK;QACrB,4DAAM;QACN,sEAAK;QACD,6EAAmC;QACvC,4DAAM;QACV,4DAAM;;;;;;;;;;;;;;;;;;;;;;;ACNoD;AACF;AAET;AACU;AACG;AACE;;AAiBvD,MAAM,SAAS;;kEAAT,SAAS;sGAAT,SAAS,cAFR,wDAAY;2GAHX;QACP,kEAAS;KACZ,YAPM;YACL,oEAAa;YACb,kEAAgB;YAChB,wEAAmB;SACtB;mIAMU,SAAS,mBAbd,wDAAY;QACZ,sEAAa,aAGf,oEAAa;QACb,kEAAgB;QAChB,wEAAmB;;;;;;;;;;;;;;;;;;ACdY;;;AAK9B,MAAM,SAAS;IAElB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAI7B,mBAAc,GAAoB,EAAE,CAAC;IAF5C,CAAC;IAID,YAAY;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAK,YAAY,CAAC;aACjC,IAAI,CAAC,mDAAG,CAAC,IAAI,CAAC,EAAE;YACb,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,OAAO;QACX,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;;kEAdQ,SAAS;0GAAT,SAAS,WAAT,SAAS;;;;;;;;;;;;;;;;;;;;;;;;IERtB,sEAAmD;IAC/C,+EAAkE;IACtE,4DAAM;;ADMS,MAAM,aAAa;IAE9B,YAAmB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IACvC,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;aACxB,SAAS,CAAC,GAAG,EAAE;YACZ,eAAe;QACnB,CAAC,CAAC,CAAC;IACX,CAAC;;0EAVgB,aAAa;2GAAb,aAAa;QCRlC,yGAEM;;QAFgB,iGAA2B;;;;;;;;;;;;;;;;ACAjD,gFAAgF;AAChF,mEAAmE;AACnE,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;ACfvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/subreddit.service.ts","./src/app/views/subredditView.component.ts","./src/app/views/subredditView.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'link-page',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent {\n  title = 'client';\n}\n","<div>\r\n    <div>\r\n        <h1>LukeTube</h1>\r\n    </div>\r\n    <div>\r\n        <subreddit-links></subreddit-links>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { Subreddit } from './services/subreddit.service';\nimport SubredditView from './views/subredditView.component';\nimport { YouTubePlayerModule } from '@angular/youtube-player';\n\n@NgModule({\n  declarations: [\n        AppComponent,\n        SubredditView,\n  ],\n  imports: [\n      BrowserModule,\n      HttpClientModule,\n      YouTubePlayerModule,\n  ],\n    providers: [\n        Subreddit\n    ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\n\r\nimport { RedditComment } from \"../shared/RedditComment\";\r\n\r\n@Injectable()\r\nexport class Subreddit {\r\n\r\n    constructor(private http: HttpClient) {\r\n\r\n    }\r\n\r\n    public redditComments: RedditComment[] = [];\r\n\r\n    loadComments(): Observable<void> {\r\n        return this.http.get<[]>(\"/api/space\")\r\n            .pipe(map(data => {\r\n                this.redditComments = data;\r\n                return;\r\n            }));\r\n    }\r\n\r\n}","import { OnInit } from \"@angular/core\";\r\nimport { Component } from \"@angular/core\";\r\nimport { Subreddit } from \"../services/subreddit.service\";\r\n\r\n@Component({\r\n    selector: \"subreddit-links\",\r\n    templateUrl: \"subredditView.component.html\",\r\n})\r\nexport default class subredditView implements OnInit{\r\n\r\n    constructor(public subreddit: Subreddit) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subreddit.loadComments()\r\n            .subscribe(() => {\r\n                // do something\r\n            });\r\n    }\r\n}","<div *ngFor=\"let link of subreddit.redditComments\">\r\n    <youtube-player videoId={{ link.youtubeLinkId }}></youtube-player>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}